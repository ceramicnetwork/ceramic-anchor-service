name: Build, push, publish CAS

on:
  push:
    branches:
      - main
      - "release-candidate"
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment name (one of: dev, tnet, prod)'
        required: true
        default: 'dev'

jobs:
  build_push_publish:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Set variables
      id: set-vars
      run: |
        SHA_TAG=$(git rev-parse --short=12 "${{ github.sha }}")
        echo "::set-output name=SHA_TAG::$SHA_TAG"
        if [[ "${{github.base_ref}}" == "main" || "${{github.ref}}" == "refs/heads/main" ]]; then
          echo "::set-output name=ECR_REPOSITORY::ceramic-prod-cas"
          echo "::set-output name=IMAGE_TAG::latest"
          echo "::set-output name=IMAGE_TAG_2::prod"
          echo "::set-output name=WEBHOOK_URL::${{ secrets.WEBHOOK_URL_FIRE }}"
        elif [[ "${{github.base_ref}}" == "release-candidate" || "${{github.ref}}" == "refs/heads/release-candidate" ]]; then
          echo "::set-output name=ECR_REPOSITORY::ceramic-tnet-cas"
          echo "::set-output name=IMAGE_TAG::tnet"
          echo "::set-output name=IMAGE_TAG_2::release-candidate"
          echo "::set-output name=WEBHOOK_URL::${{ secrets.WEBHOOK_URL_CLAY }}"
        else
          echo "::set-output name=ECR_REPOSITORY::ceramic-dev-cas"
          echo "::set-output name=IMAGE_TAG::dev"
          echo "::set-output name=IMAGE_TAG_2::develop"
          echo "::set-output name=WEBHOOK_URL::${{ secrets.WEBHOOK_URL_DEV }}"
        fi
    -
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    -
      name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
      name: Build, tag, and push images ECR and DockerHub
      id: build-image
      env:
        DOCKERHUB_IMAGE_ID: "ceramicnetwork/ceramic-anchor-service"
        ECR_IMAGE_ID: "${{ steps.login-ecr.outputs.registry }}/${{ steps.set-vars.outputs.ECR_REPOSITORY }}"
        SHA_TAG: ${{ steps.set-vars.outputs.SHA_TAG }}
        FULL_SHA_TAG: ${{ github.sha }}
        IMAGE_TAG: ${{ steps.set-vars.outputs.IMAGE_TAG }}
        IMAGE_TAG_2: ${{ steps.set-vars.outputs.IMAGE_TAG_2 }}
      run: |
        echo "::set-output name=ECR_IMAGE_ID::$ECR_IMAGE_ID"
        docker build -f Dockerfile -t cas -t $DOCKERHUB_IMAGE_ID:$SHA_TAG -t $DOCKERHUB_IMAGE_ID:$FULL_SHA_TAG -t $DOCKERHUB_IMAGE_ID:$IMAGE_TAG -t $DOCKERHUB_IMAGE_ID:$IMAGE_TAG_2 .
        docker build -f Dockerfile.runner -t $ECR_IMAGE_ID:$SHA_TAG -t $ECR_IMAGE_ID:$FULL_SHA_TAG  -t $ECR_IMAGE_ID:$IMAGE_TAG -t $ECR_IMAGE_ID:$IMAGE_TAG_2 .
        docker push -a $DOCKERHUB_IMAGE_ID
        docker push -a $ECR_IMAGE_ID
    -
      name: Publish build event
      env:
        IMAGE_TAG: ${{ steps.set-vars.outputs.IMAGE_TAG }}
        EVENT_WEBHOOK_URL: "${{ steps.set-vars.outputs.WEBHOOK_URL }}/github/event"
        ECR_IMAGE_ID: ${{ steps.build-image.outputs.ECR_IMAGE_ID }}
      run: |
        res=$(docker run --rm curlimages/curl curl -X POST $EVENT_WEBHOOK_URL \
          -H "Content-Type: application/json" \
          --user "${{ secrets.AWS_ACCESS_KEY_ID }}:${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          --aws-sigv4 "aws:amz:${{ secrets.AWS_DEFAULT_REGION }}:execute-api" \
          -d '
            {
              "event_type": "new_cas_image",
              "client_payload":
              {
                "env_tag": "${{ env.IMAGE_TAG }}",
                "sha_tag": "${{ github.sha }}",
                "image_id": "${{ env.ECR_IMAGE_ID }}"
              }
            }
          ') || exit 1
        echo $res
        if [[ $res != *"Forwarded event"* ]]; then
          exit 1
        fi
